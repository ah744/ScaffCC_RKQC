// No gates.h library
// #include "gates.h"
/**********************************************************
gates.h contains

gate X(qbit input[1]);
gate Y(qbit input[1]);
gate Z(qbit input[1]);
gate H(qbit input[1]);
gate S(qbit input[1]);
gate T(qbit input[1]);

// Daggered gates
gate Tdag(qbit input[1]);
gate Sdag(qbit input[1]);

// CNOT gate defined on two 1-qubit registers
gate CNOT(qbit target[1], qbit control[1]);

// Toffoli (CCNOT) gate
gate Toffoli(qbit target[1], qbit control1[1], qbit control2[1]);

// Rotation gates
gate Rz(qbit target[1], float angle); //Arbitrary Rotation
// Controlled rotation
gate controlledRz(qbit target[1], qubit control[1], float angle);

// One-qubit measurement gates
gate MeasZ(qbit input[1], bit data);
gate measX(qbit input[1], bit data);

//One-qubit prepare gates: initializes to 0
gate PrepZ(qbit input[1]);
gate prepX(qbit input[1]);

//Fredkin (controlled swap) gate
gate fredkin(qbit targ[1], qbit control1[1], qbit control2[1])

********************************************************/
#include <math.h>

// Since the Scaffold document does not give explicit instructions on 
// how to specify a qbit for a variable number of qubits we use a define 
// statement to specify the value n for the polynomial x^n + x + 1
#define n 5
#define pi 3.141592653589793238462643383279502884197

// gatename equivalents
#define NOT X
#define PhaseFlip Z


/********************************************************************
// I am not sure if Scaffold defines a variable length multi-qubit 
// controlled gate similar to the QCL control structure which can 
// condition a quantum operation on an arbitrary qbit cntrl[] 
// thereby performing the operation only when the control state is 11...1

// The code in diffuse and EQxMark produces a single test bit
// given a multi-qbit control vector using the Toffoli gate 
// specified in gates.h
*********************************************************************/


/***************************
 Diffusion Module
***************************/
module diffuse(qbit q[n]) {
  int j;
  // local qbit x[n-1];  // scratch register
  // No local registers yet
  qbit x[n-1];  // scratch register

  // Hadamard applied to q
  // No forall yet
  // forall(j=0; j<n; j++) { H(q[j]); }
  for(j=0; j<n; j++) { H(q[j]); }

  // Want to phase flip on q = 00...0
  // So invert q to compute q[0] and q[1] and ... and q[n-1]
  for(j = 0; j < n; j++) 
    NOT(q[j]);  

  // Compute x[n-2] = q[0] and q[1] and ... and q[n-1]
  // No forall yet
  // forall(j=0; j<n-1; j++) PrepZ(x[j]);
  for(j=0; j<n-1; j++) PrepZ(x[j], 0);
  Toffoli(x[0], q[1], q[0]); 
  for(j = 1; j < n-1; j++)
    Toffoli(x[j], x[j-1], q[j+1]);
  
  // Phase flip conditioned on x[n-2]
  PhaseFlip(x[n-2]);  // Phase Flip==Z if q=00...0, i.e. x[n-2]==1

  // Undo the local registers
  for(j = n-2; j > 0; j--)
    Toffoli(x[j], x[j-1], q[j+1]);
  Toffoli(x[0], q[1], q[0]); 
   
  // Restore q
  for(j = 0; j < n; j++) 
    NOT(q[j]);
        
  // Complete the diffusion
  // No forall yet
  // forall(j=0; j<n; j++) { H(q[j]); }
  for(j=0; j<n; j++) { H(q[j]); }
}

/***********************************************
 Test if the input polynomial
   b(x) = b0 + b1*x + ... + b_(n-1)*x^(n-1) == x
 over the ring GF(2)[x] mod (x^n + x + 1).


 if(tF!=0) set return result in qubit t[0] else PhaseFlip
************************************************/
module EQxMark(qbit b[n], qbit t[1], int tF) {
  int j;
  // No local registers yet
  // local qbit x[n-1];  // scratch register
  qbit x[n-1];  // scratch register

  // Change b to reflect testing for the polynomial x
  for(j = 0; j < n; j++) 
    if(j!=1) NOT(b[j]);         

  // Compute x[n-2] = b[0] and b[1] and ... and b[n-1]
  // No forall yet
  // forall(j=0; j<n-1; j++) PrepZ(x[j]);
  for(j=0; j<n-1; j++) PrepZ(x[j], 0);
  Toffoli(x[0], b[1], b[0]); 
  for(j = 1; j < n-1; j++)
      Toffoli(x[j], x[j-1], b[j+1]);
  
  // Either return result in t or Phase flip conditioned on x[n-2]
  if(tF!=0) {
    CNOT(t[0], x[n-2]); // Returns result in t
  }
  else {
    PhaseFlip(x[n-2]);  // Phase Flip==Z if b=01...0 == 'x', i.e. x[n-2]==1
  }

  // Undo the local registers
  for(j = n-2; j > 0; j--)
    Toffoli(x[j], x[j-1], b[j+1]);
  Toffoli(x[0], b[1], b[0]); 
   
  // Restore b
  for(j = 0; j < n; j++) 
    if(j!=1) NOT(b[j]);         
}  
  


// begin ctqg
ctqg Sqr(qbit a[n], qbit b[n]) {
  zero_to_garbage aint[n];
  $ aint := a;
  $ b += aint * a;
}
// end ctqg

/***************************************************
 Program to compute the sqrt(x) in the polynomial ring

     GF(2)[x] / (x^n+x+1)

 Elements of the ring are represented as polynomials
 of maximum degree n-1:

   a(x) = a[0] + a[1]*x + ... + a[n-1]*x^(n-1)

 Use grover search.

****************************************************/
int main() { 

  // Quantum registers
  qbit a[n];  // Polynomials to search
  qbit b[n];  // b(x) = a(x)*a(x) mod (x^n + x + 1)
  qbit t[1];  // Test result if b(x) == x

  // Grover parameters and step index
  int N=2^n;
  int nstep = floor((pi/4)*sqrt(N));
  int istep;

  // Holds final measurement values
  cbit mt[1]; // measure t
  cbit ma[n]; // measure a  This holds the square root
  cbit mb[n]; // measure b  No need to measure since b(x) should be x
  int i;

  // Initialize a[0..n-1] into uniform superposition
  // No forall yet
  // forall(i=0; i<n; i++) H(a[i]);
  for(i=0; i<n; i++) H(a[i]);

  // Grover iteration: Mark then diffuse
  for(istep=1; istep<=nstep; istep++) {
    
    Sqr(a, b);         // Sets b(x) = a(x) * a(x)
    EQxMark(b, t, 0);  // Tests if b(x) == x and if so Phase Flips
    Sqr(a, b);         // Note: Sqr is it's own inverse
      
    // Diffuse
    diffuse(a);
  }
  
  // For the final measurement, compute causal state
  Sqr(a, b);
  EQxMark(b, t, 1);   // Note; 1 implies test result b(x)==x is returned in t

  // Now measure and report
  mt[0] = MeasZ(t[0]);  // If mt[0]==1 then success
  // measure a to recover the square root
  for(i=0; i<n; i++) ma[i] = MeasZ(a[i]);

  return 0;
}

// Problem instances
//main(2);
//main(3);
//main(5);
//main(8);
//main(13);
//main(19);

